services:
  kafka:
    image: apache/kafka:latest
    container_name: kafka-broker
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: BROKER://:9092,BROKER_HOST://:19092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka:9092,BROKER_HOST://localhost:19092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SASL_PLAINTEXT,BROKER:SASL_PLAINTEXT,BROKER_HOST:SASL_PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_SASL_ENABLED_MECHANISMS: "PLAIN"
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_OPTS: "-Djava.security.auth.login.config=/opt/kafka/config/custom/kafka_server_jaas.conf"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    restart: always
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./kafka-config:/opt/kafka/config/custom
    networks:
      - app-net

  neo4j:
    container_name: neo4j
    image: neo4j:2025.03-community-bullseye
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: always
    volumes:
      - ~/neo4j/data:/data
    networks:
      - app-net
    environment:
      - NEO4J_server_bolt_advertised__address=neo4j:7687

  mariadb:
    image: mariadb:10.11.11-ubi9
    container_name: mariadb
    ports:
      - "3306:3306"
    environment:
      MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: 1
      MYSQL_DATABASE: testdb
    restart: always
    networks:
      - app-net
    volumes:
      - mariadb:/var/lib/mysql
      - ~/config/conf.d:/etc/mysql/conf.d

  postgres:
    image: postgres:17.5-alpine3.22
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: always
    networks:
      - app-net
    volumes:
      - pgdata:/var/lib/postgresql/data

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    restart: always
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
    networks:
      - app-net
    volumes:
      - qdrant-data:/qdrant/storage

  mongo:
    container_name: mongodb
    image: mongo:latest
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - app-net

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASKCAUTH_USERNAME: root
      ME_CONFIG_BASKCAUTH_PASSWORD: example
    depends_on:
      - mongo
    networks:
      - app-net

  minio1:
    image: minio/minio:latest
    container_name: minio-1
    command: server http://minio{1...2}/data --console-address ":9001"
    ports:
      - "9101:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    restart: always
    volumes:
      - minio-data1:/data
    shm_size: "1gb"
    networks:
      - minio-net

  minio2:
    image: minio/minio:latest
    container_name: minio-2
    command: server http://minio{1...2}/data --console-address ":9001"
    ports:
      - "9102:9000"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    restart: always
    volumes:
      - minio-data2:/data
    shm_size: "1gb"
    networks:
      - minio-net

  rabbitmq:
    image: rabbitmq:4.1.4-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Port for AMQP (the standard messaging protocol)
      - "15672:15672" # Port for the Management UI
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    restart: always
    networks:
      - app-net

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ~/docker/nginx/conf.d:/etc/nginx/conf.d
  #     - ~/docker/nginx/certs:/etc/nginx/certs
  #     - ~/docker/nginx/html:/usr/share/nginx/html
  #   restart: always
  #   networks:
  #     - app-net
  #     - minio-net
  #   depends_on:
  #     - kafka
  #     - mariadb
  #     - mongo
  #     - neo4j
  #     - minio1
  #     - minio2

networks:
  app-net:
    driver: bridge
    name: app-net
  minio-net:
    driver: bridge

volumes:
  kafka-data:
    driver: local
  mariadb:
    driver: local
  minio-data1:
    driver: local
  minio-data2:
    driver: local
  pgdata:
    driver: local
  qdrant-data:
    driver: local
